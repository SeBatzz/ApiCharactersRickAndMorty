@page "/"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject HttpClient Http
@using System.Linq
@using System.Collections.Generic

<PageTitle>Personajes de Rick y Morty enlistados</PageTitle>

<h3>Personajes de Rick y Morty enlistados</h3>



@if (characters == null)
{
    <p>Cargando personajes...</p>
    
}
else
{
    <div class="total-likes-display">

        Total de Likes: <strong>@TotalLikes</strong>

    </div>
}

<div class="character-grid">
        @foreach (var character in GetPagedCharacters()) 
        {
            <div class="character-card">
                <img src="@character.Image" alt="@character.Name" />

                <h4>@character.Name</h4>
                <p><strong>Estado:</strong> @character.Status</p>
                <p><strong>Especie:</strong> @character.Species</p>
                <div class="score-section">
                <button class="btn-like" @onclick="() => LikeCharacter(character)" aria-label="Like">👍</button>
                <button class="btn-dislike" @onclick="() => DislikeCharacter(character)" aria-label="Dislike">👎</button>
                    <p>Calificacion: <span class="score-value">@character.Score</span></p>
                </div>
            </div>
        }
</div>
<div class="pagination-controls">
    <button class="btn-page" @onclick="PreviousPage" disabled="@(currentPage == 1)">Anterior</button>
    <span>Página @currentPage de @TotalPages</span>
    <button class="btn-page" @onclick="NextPage" disabled="@(currentPage == TotalPages)">Siguiente</button>
</div>


@code {

    // almacenar los personajes 
    private List<Character> characters;

    // Variables para la paginación
    private int currentPage = 1; 
    private int itemsPerPage = 14; 
    // Calcula el número total de páginas. Math.Ceiling asegura que si hay un resto
    private int TotalPages => (characters == null || !characters.Any()) ? 1 : (int)Math.Ceiling((double)characters.Count / itemsPerPage);

    private class ApiResponse
    {   
        public Info Info { get; set; } // Propiedad para la información de paginación
        public List<Character> Results { get; set; }
    }

    private class Info
    {
        public int Count { get; set; }
        public int Pages { get; set; }
        public string Next { get; set; } // URL de la siguiente página de resultados
        public string Prev { get; set; } // URL de la página anterior de resultados
    }
    
    private int TotalLikes
    {
        get
        {

            
            int total = 0;

            foreach (var character in characters)
            {

                if (character.Score > 0)
                {
                    total += character.Score; // Solo suma los puntajes positivos
                }
            }

            return total;
        }
    }

    // modelo de datos para un personaje 

    public class Character
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Status { get; set; }
        public string Species { get; set; }
        public string Image { get; set; }
        public string Gender { get; set; } 
        public int Score { get; set; } = 0; 
    }

   
    protected override async Task OnInitializedAsync()
    {
        try
        {
            characters = new List<Character>(); // Inicializa la lista para acumular TODOS los personajes
            string ApiUrl = "https://rickandmortyapi.com/api/character"; // URL de la primera página de la API


            // Bucle while para seguir las páginas de la API
            while (!string.IsNullOrEmpty(ApiUrl))
            {
                var response = await Http.GetFromJsonAsync<ApiResponse>(ApiUrl);

                if (response?.Results != null)
                {
                    characters.AddRange(response.Results); // Añade los personajes de la página actual a la lista total
                    ApiUrl = response.Info?.Next; // Obtiene la URL de la siguiente página de la API
                }
                else
                {
                    ApiUrl = null; // Si no hay resultados o Info es null
                }
            }

            // Asegurarse de que la página actual no sea mayor que el total de páginas si itemsPerPage es mayor que el total de characters
            if (characters != null && characters.Any() && currentPage > TotalPages)
            {
                currentPage = TotalPages;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ocurrio un error al cargar la lista de los personajes: {ex.Message}");
        }
    }

    // Método para incrementar el puntaje de un personaje 
    private void LikeCharacter(Character character)
    {
        character.Score++; // Incrementa el puntaje
        
    }

    // Método para decrementar el puntaje de un personaje cuando se hace clic en "Dislike"
    private void DislikeCharacter(Character character)
    {
        character.Score--; // Disminuye el puntaje
        
    }




    // Método para obtener los personajes de la página actual
    private List<Character> GetPagedCharacters()
    {
        if (characters == null || !characters.Any())
        {
            return new List<Character>();
        }

        // Calcula el índice desde donde empezar a tomar personajes
        var startIndex = (currentPage - 1) * itemsPerPage;

       
        return characters.Skip(startIndex).Take(itemsPerPage).ToList();
    }

    // Método para ir a la página anterior
    private void PreviousPage()
    {
        if (currentPage > 1) 
        {
            currentPage--; // Reduce el número de página
        }
    }

    // Método para ir a la página siguiente
    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++; // Aumenta el número de página
        }
    }
}
